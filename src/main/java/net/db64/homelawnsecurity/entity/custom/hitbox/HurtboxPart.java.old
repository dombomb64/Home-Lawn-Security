package net.db64.homelawnsecurity.entity.custom.hitbox;

import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityDimensions;
import net.minecraft.entity.EntityPose;
import net.minecraft.entity.damage.DamageSource;
import net.minecraft.entity.data.DataTracker;
import net.minecraft.item.ItemStack;
import net.minecraft.network.listener.ClientPlayPacketListener;
import net.minecraft.network.packet.Packet;
import net.minecraft.server.network.EntityTrackerEntry;
import net.minecraft.server.world.ServerWorld;
import net.minecraft.storage.ReadView;
import net.minecraft.storage.WriteView;
import org.jetbrains.annotations.Nullable;

public class HurtboxPart extends Entity {
	public final ICustomHurtbox owner;
	public final String name;
	private final EntityDimensions partDimensions;

	public HurtboxPart(ICustomHurtbox owner, String name, float width, float height) {
		super(owner.getBaseEntity().getType(), owner.getBaseEntity().getEntityWorld());
		this.partDimensions = EntityDimensions.changing(width, height);
		this.calculateDimensions();
		this.owner = owner;
		this.name = name;
	}

	@Override
	protected void initDataTracker(DataTracker.Builder builder) {
	}

	@Override
	protected void readCustomData(ReadView view) {
	}

	@Override
	protected void writeCustomData(WriteView view) {
	}

	@Override
	public boolean canHit() {
		return true;
	}

	@Nullable
	@Override
	public ItemStack getPickBlockStack() {
		return this.owner.getBaseEntity().getPickBlockStack();
	}

	@Override
	public final boolean damage(ServerWorld world, DamageSource source, float amount) {
		return !this.isAlwaysInvulnerableTo(source) && this.owner.damagePart(world, this, source, amount);
	}

	@Override
	public boolean isPartOf(Entity entity) {
		return this == entity || this.owner.getBaseEntity() == entity;
	}

	@Override
	public Packet<ClientPlayPacketListener> createSpawnPacket(EntityTrackerEntry entityTrackerEntry) {
		throw new UnsupportedOperationException();
	}

	@Override
	public EntityDimensions getDimensions(EntityPose pose) {
		return this.partDimensions;
	}

	@Override
	public boolean shouldSave() {
		return false;
	}
}
